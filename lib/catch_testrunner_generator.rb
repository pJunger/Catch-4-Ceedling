require 'fileutils'


class CatchTestRunnerGenerator
  def initialize(options=nil)
    @options = UnityTestRunnerGenerator.default_options
    case options
    when NilClass then @options
    when String   then @options.merge!(UnityTestRunnerGenerator.grab_config(options))
    when Hash     then @options.merge!(options)
    else raise 'If you specify arguments, it should be a filename or a hash of options'
    end
    require "#{File.expand_path(File.dirname(__FILE__))}/type_sanitizer"
  end

  def run(input_file, output_file, options = nil)
    raise 'This should no be called?'
  end

  def find_tests(source)
    # We just fake that, as we do not need to find the tests
    return []
  end

  def generate(input_file, output_file, tests, used_mocks, testfile_includes)
    # We do not need: input_file, tests, testfile_includes

    # The Main file will not change, as this would take ages to compile
    FileUtils.copy_file("#{@plugin_root}/src/catchMain.cpp", output_file)

    # Create the mock_interface implementation
    File.open("#{input_file}_runner.c", 'f') do |f|
      f.puts '/* AUTOGENERATED FILE, PLEASE DO NOT EDIT */'
      f.puts '/* Implement the mocking interface */'
      f.puts %{#include "mock_interface.h"}
      f.puts ''
      f.puts 'void init_mocks() {'
      used_mocks.each do |mock|
        f.puts "    #{mock}_Init();"
      end
      f.puts '}'
      f.puts ''
      f.puts 'void destroy_mocks() {'
      used_mocks.each do |mock|
        f.puts "    #{mock}_Init();"
      end
      f.puts '}'
      f.puts ''
    end

  end

  
end
