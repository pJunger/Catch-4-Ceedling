require 'fileutils'


# Monkey patch the original generator
class GeneratorTestRunner
  @@main_location
  def initialize(options=nil)
    
  end

  def self.set_main_location(f_name)
    @@main_location = f_name
  end

  def run(input_file, output_file, options = nil)
    raise 'This should no be called?'
  end

  def find_tests(source)
    # We just fake that, as we do not need to find the tests
    return []
  end

  def generate(input_file, output_file, tests, used_mocks, testfile_includes)
    # We do not need: input_file, tests, testfile_includes

    # Optimization: Create extra catch_main file to reduce compilation times
    # The Main file will not change, as this would take ages to compile
    # FileUtils.copy_file("#{@@main_location}/src/catch_main.cpp", "#{File.dirname(output_file)}/catch_main.c")

    FileUtils.copy_file("#{@@main_location}/src/catch_main.c", output_file)

    # Create the mock_interface implementation
    File.open(output_file, 'a') do |f|
      f.puts '/* AUTOGENERATED FILE, PLEASE DO NOT EDIT */'
      f.puts '/* Implement the mocking interface */'
      f.puts '#include "mock_interface.h"'
      f.puts ''
      used_mocks.each do |mock|
        f.puts "#include \"#{mock}.h\""
      end
      f.puts ''
      f.puts 'void init_mocks() {'
      used_mocks.each do |mock|
        f.puts "    #{mock}_Init();"
      end
      f.puts '}'
      f.puts ''
      f.puts 'void destroy_mocks() {'
      used_mocks.each do |mock|
        f.puts "    #{mock}_Init();"
      end
      f.puts '}'
      f.puts ''
    end

  end

  
end
